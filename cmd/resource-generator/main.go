package main

import (
	_ "embed"
	"errors"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	defaultYear       = "2025"
	defaultAPIVersion = "v1alpha1"
)

//go:embed data/api.template
var api_template string

//go:embed data/adapter.template
var adapter_template string

//go:embed data/controller.template
var controller_template string

type specExtraValidation struct {
	Rule    string
	Message string
}

type additionalPrintColumn struct {
	Name        string
	Type        string
	JSONPath    string
	Description string
}

type templateFields struct {
	APIVersion             string
	Year                   string
	Name                   string
	NameLower              string
	IsNotNamed             bool
	SpecExtraType          string
	StatusExtraType        string
	SpecExtraValidations   []specExtraValidation
	AdditionalPrintColumns []additionalPrintColumn
}

var allResources []templateFields = []templateFields{
	{
		Name: "Image",
		SpecExtraValidations: []specExtraValidation{
			{
				Rule:    "!has(self.__import__) ? has(self.resource.content) : true",
				Message: "resource content must be specified when not importing",
			},
		},
		StatusExtraType: "ImageStatusExtra",
	},
	{
		Name:       "Flavor",
		APIVersion: "v1alpha1",
	},
	{
		Name: "FloatingIP",
		AdditionalPrintColumns: []additionalPrintColumn{
			{
				Name:        "Address",
				Type:        "string",
				JSONPath:    ".status.resource.floatingIP",
				Description: "Allocated IP address",
			},
		},
		IsNotNamed: true, // FloatingIP is not named in OpenStack
	},
	{
		Name:       "Network",
		APIVersion: "v1alpha1",
	},
	{
		Name: "Subnet",
	},
	{
		Name: "Router",
	},
	{
		Name: "Port",
		AdditionalPrintColumns: []additionalPrintColumn{
			{
				Name:        "Addresses",
				Type:        "string",
				JSONPath:    ".status.resource.fixedIPs[*].ip",
				Description: "Allocated IP addresses",
			},
		},
	},
	{
		Name: "SecurityGroup",
	},
	{
		Name: "Server",
	},
	{
		Name: "ServerGroup",
	},
	{
		Name: "Project",
	},
	{
		Name: "Volume",
	},
}

func main() {
	apiTemplate := template.Must(template.New("api").Parse(api_template))
	adapterTemplate := template.Must(template.New("adapter").Parse(adapter_template))
	controllerTemplate := template.Must(template.New("controller").Parse(controller_template))

	for i := range allResources {
		resource := &allResources[i]

		if resource.Year == "" {
			resource.Year = defaultYear
		}

		if resource.APIVersion == "" {
			resource.APIVersion = defaultAPIVersion
		}

		resourceLower := strings.ToLower(resource.Name)
		resource.NameLower = resourceLower

		apiPath := filepath.Join("api", resource.APIVersion, "zz_generated."+resourceLower+"-resource.go")
		if err := writeTemplate(apiPath, apiTemplate, resource); err != nil {
			panic(err)
		}

		controllerDirPath := filepath.Join("internal", "controllers", resourceLower)
		if _, err := os.Stat(controllerDirPath); os.IsNotExist(err) {
			err = os.Mkdir(controllerDirPath, 0755)
			if err != nil {
				panic(err)
			}
		}

		adapterPath := filepath.Join(controllerDirPath, "zz_generated.adapter.go")
		if err := writeTemplate(adapterPath, adapterTemplate, resource); err != nil {
			panic(err)
		}

		controllerPath := filepath.Join(controllerDirPath, "zz_generated.controller.go")
		if err := writeTemplate(controllerPath, controllerTemplate, resource); err != nil {
			panic(err)
		}
	}
}

func writeTemplate(path string, template *template.Template, resource *templateFields) (err error) {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer func() {
		err = errors.Join(err, file.Close())
	}()

	err = writeAutogeneratedHeader(file)
	if err != nil {
		return err
	}

	return template.Execute(file, resource)
}

func writeAutogeneratedHeader(f *os.File) error {
	_, err := f.WriteString("// Code generated by resource-generator. DO NOT EDIT.\n")

	return err
}
