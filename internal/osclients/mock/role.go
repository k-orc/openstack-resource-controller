/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ../role.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=role.go -source=../role.go github.com/k-orc/openstack-resource-controller/internal/osclients/mock RoleClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	roles "github.com/gophercloud/gophercloud/v2/openstack/identity/v3/roles"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleClient is a mock of RoleClient interface.
type MockRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleClientMockRecorder
	isgomock struct{}
}

// MockRoleClientMockRecorder is the mock recorder for MockRoleClient.
type MockRoleClientMockRecorder struct {
	mock *MockRoleClient
}

// NewMockRoleClient creates a new mock instance.
func NewMockRoleClient(ctrl *gomock.Controller) *MockRoleClient {
	mock := &MockRoleClient{ctrl: ctrl}
	mock.recorder = &MockRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleClient) EXPECT() *MockRoleClientMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleClient) CreateRole(ctx context.Context, opts roles.CreateOptsBuilder) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, opts)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleClientMockRecorder) CreateRole(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleClient)(nil).CreateRole), ctx, opts)
}

// DeleteRole mocks base method.
func (m *MockRoleClient) DeleteRole(ctx context.Context, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleClientMockRecorder) DeleteRole(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleClient)(nil).DeleteRole), ctx, resourceID)
}

// GetRole mocks base method.
func (m *MockRoleClient) GetRole(ctx context.Context, resourceID string) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, resourceID)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRoleClientMockRecorder) GetRole(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleClient)(nil).GetRole), ctx, resourceID)
}

// ListRoles mocks base method.
func (m *MockRoleClient) ListRoles(ctx context.Context, listOpts roles.ListOptsBuilder) iter.Seq2[*roles.Role, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx, listOpts)
	ret0, _ := ret[0].(iter.Seq2[*roles.Role, error])
	return ret0
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRoleClientMockRecorder) ListRoles(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRoleClient)(nil).ListRoles), ctx, listOpts)
}

// UpdateRole mocks base method.
func (m *MockRoleClient) UpdateRole(ctx context.Context, id string, opts roles.UpdateOptsBuilder) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, id, opts)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleClientMockRecorder) UpdateRole(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleClient)(nil).UpdateRole), ctx, id, opts)
}
