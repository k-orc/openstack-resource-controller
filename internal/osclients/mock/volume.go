/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ../volume.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=volume.go -source=../volume.go github.com/k-orc/openstack-resource-controller/internal/osclients/mock VolumeClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	volumes "github.com/gophercloud/gophercloud/v2/openstack/blockstorage/v3/volumes"
	volumetypes "github.com/gophercloud/gophercloud/v2/openstack/blockstorage/v3/volumetypes"
	gomock "go.uber.org/mock/gomock"
)

// MockVolumeClient is a mock of VolumeClient interface.
type MockVolumeClient struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeClientMockRecorder
	isgomock struct{}
}

// MockVolumeClientMockRecorder is the mock recorder for MockVolumeClient.
type MockVolumeClientMockRecorder struct {
	mock *MockVolumeClient
}

// NewMockVolumeClient creates a new mock instance.
func NewMockVolumeClient(ctrl *gomock.Controller) *MockVolumeClient {
	mock := &MockVolumeClient{ctrl: ctrl}
	mock.recorder = &MockVolumeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeClient) EXPECT() *MockVolumeClientMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method.
func (m *MockVolumeClient) CreateVolume(ctx context.Context, opts volumes.CreateOptsBuilder) (*volumes.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, opts)
	ret0, _ := ret[0].(*volumes.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockVolumeClientMockRecorder) CreateVolume(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockVolumeClient)(nil).CreateVolume), ctx, opts)
}

// CreateVolumeType mocks base method.
func (m *MockVolumeClient) CreateVolumeType(ctx context.Context, opts volumetypes.CreateOptsBuilder) (*volumetypes.VolumeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeType", ctx, opts)
	ret0, _ := ret[0].(*volumetypes.VolumeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeType indicates an expected call of CreateVolumeType.
func (mr *MockVolumeClientMockRecorder) CreateVolumeType(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeType", reflect.TypeOf((*MockVolumeClient)(nil).CreateVolumeType), ctx, opts)
}

// DeleteVolume mocks base method.
func (m *MockVolumeClient) DeleteVolume(ctx context.Context, volumeID string, opts volumes.DeleteOptsBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, volumeID, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockVolumeClientMockRecorder) DeleteVolume(ctx, volumeID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockVolumeClient)(nil).DeleteVolume), ctx, volumeID, opts)
}

// DeleteVolumeType mocks base method.
func (m *MockVolumeClient) DeleteVolumeType(ctx context.Context, volumeTypeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeType", ctx, volumeTypeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeType indicates an expected call of DeleteVolumeType.
func (mr *MockVolumeClientMockRecorder) DeleteVolumeType(ctx, volumeTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeType", reflect.TypeOf((*MockVolumeClient)(nil).DeleteVolumeType), ctx, volumeTypeID)
}

// GetVolume mocks base method.
func (m *MockVolumeClient) GetVolume(ctx context.Context, volumeID string) (*volumes.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", ctx, volumeID)
	ret0, _ := ret[0].(*volumes.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockVolumeClientMockRecorder) GetVolume(ctx, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockVolumeClient)(nil).GetVolume), ctx, volumeID)
}

// GetVolumeType mocks base method.
func (m *MockVolumeClient) GetVolumeType(ctx context.Context, volumeTypeID string) (*volumetypes.VolumeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeType", ctx, volumeTypeID)
	ret0, _ := ret[0].(*volumetypes.VolumeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeType indicates an expected call of GetVolumeType.
func (mr *MockVolumeClientMockRecorder) GetVolumeType(ctx, volumeTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeType", reflect.TypeOf((*MockVolumeClient)(nil).GetVolumeType), ctx, volumeTypeID)
}

// ListVolumeTypes mocks base method.
func (m *MockVolumeClient) ListVolumeTypes(ctx context.Context, listOpts volumetypes.ListOptsBuilder) iter.Seq2[*volumetypes.VolumeType, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeTypes", ctx, listOpts)
	ret0, _ := ret[0].(iter.Seq2[*volumetypes.VolumeType, error])
	return ret0
}

// ListVolumeTypes indicates an expected call of ListVolumeTypes.
func (mr *MockVolumeClientMockRecorder) ListVolumeTypes(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeTypes", reflect.TypeOf((*MockVolumeClient)(nil).ListVolumeTypes), ctx, listOpts)
}

// ListVolumes mocks base method.
func (m *MockVolumeClient) ListVolumes(ctx context.Context, listOpts volumes.ListOptsBuilder) iter.Seq2[*volumes.Volume, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", ctx, listOpts)
	ret0, _ := ret[0].(iter.Seq2[*volumes.Volume, error])
	return ret0
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockVolumeClientMockRecorder) ListVolumes(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockVolumeClient)(nil).ListVolumes), ctx, listOpts)
}

// UpdateVolume mocks base method.
func (m *MockVolumeClient) UpdateVolume(ctx context.Context, id string, opts volumes.UpdateOptsBuilder) (*volumes.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", ctx, id, opts)
	ret0, _ := ret[0].(*volumes.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockVolumeClientMockRecorder) UpdateVolume(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockVolumeClient)(nil).UpdateVolume), ctx, id, opts)
}

// UpdateVolumeType mocks base method.
func (m *MockVolumeClient) UpdateVolumeType(ctx context.Context, id string, opts volumetypes.UpdateOptsBuilder) (*volumetypes.VolumeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeType", ctx, id, opts)
	ret0, _ := ret[0].(*volumetypes.VolumeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolumeType indicates an expected call of UpdateVolumeType.
func (mr *MockVolumeClientMockRecorder) UpdateVolumeType(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeType", reflect.TypeOf((*MockVolumeClient)(nil).UpdateVolumeType), ctx, id, opts)
}
