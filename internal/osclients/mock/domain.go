/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=domain.go -source=../domain.go github.com/k-orc/openstack-resource-controller/internal/osclients/mock DomainClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	domains "github.com/gophercloud/gophercloud/v2/openstack/identity/v3/domains"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainClient is a mock of DomainClient interface.
type MockDomainClient struct {
	ctrl     *gomock.Controller
	recorder *MockDomainClientMockRecorder
	isgomock struct{}
}

// MockDomainClientMockRecorder is the mock recorder for MockDomainClient.
type MockDomainClientMockRecorder struct {
	mock *MockDomainClient
}

// NewMockDomainClient creates a new mock instance.
func NewMockDomainClient(ctrl *gomock.Controller) *MockDomainClient {
	mock := &MockDomainClient{ctrl: ctrl}
	mock.recorder = &MockDomainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainClient) EXPECT() *MockDomainClientMockRecorder {
	return m.recorder
}

// CreateDomain mocks base method.
func (m *MockDomainClient) CreateDomain(ctx context.Context, opts domains.CreateOptsBuilder) (*domains.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", ctx, opts)
	ret0, _ := ret[0].(*domains.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockDomainClientMockRecorder) CreateDomain(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockDomainClient)(nil).CreateDomain), ctx, opts)
}

// DeleteDomain mocks base method.
func (m *MockDomainClient) DeleteDomain(ctx context.Context, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomain indicates an expected call of DeleteDomain.
func (mr *MockDomainClientMockRecorder) DeleteDomain(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockDomainClient)(nil).DeleteDomain), ctx, resourceID)
}

// GetDomain mocks base method.
func (m *MockDomainClient) GetDomain(ctx context.Context, resourceID string) (*domains.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", ctx, resourceID)
	ret0, _ := ret[0].(*domains.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockDomainClientMockRecorder) GetDomain(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockDomainClient)(nil).GetDomain), ctx, resourceID)
}

// ListDomains mocks base method.
func (m *MockDomainClient) ListDomains(ctx context.Context, listOpts domains.ListOptsBuilder) iter.Seq2[*domains.Domain, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", ctx, listOpts)
	ret0, _ := ret[0].(iter.Seq2[*domains.Domain, error])
	return ret0
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockDomainClientMockRecorder) ListDomains(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockDomainClient)(nil).ListDomains), ctx, listOpts)
}

// UpdateDomain mocks base method.
func (m *MockDomainClient) UpdateDomain(ctx context.Context, id string, opts domains.UpdateOptsBuilder) (*domains.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomain", ctx, id, opts)
	ret0, _ := ret[0].(*domains.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomain indicates an expected call of UpdateDomain.
func (mr *MockDomainClientMockRecorder) UpdateDomain(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomain", reflect.TypeOf((*MockDomainClient)(nil).UpdateDomain), ctx, id, opts)
}
