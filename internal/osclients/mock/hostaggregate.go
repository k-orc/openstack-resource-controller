/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ../hostaggregate.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=hostaggregate.go -source=../hostaggregate.go github.com/k-orc/openstack-resource-controller/internal/osclients/mock HostAggregateClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	aggregates "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/aggregates"
	gomock "go.uber.org/mock/gomock"
)

// MockHostAggregateClient is a mock of HostAggregateClient interface.
type MockHostAggregateClient struct {
	ctrl     *gomock.Controller
	recorder *MockHostAggregateClientMockRecorder
	isgomock struct{}
}

// MockHostAggregateClientMockRecorder is the mock recorder for MockHostAggregateClient.
type MockHostAggregateClientMockRecorder struct {
	mock *MockHostAggregateClient
}

// NewMockHostAggregateClient creates a new mock instance.
func NewMockHostAggregateClient(ctrl *gomock.Controller) *MockHostAggregateClient {
	mock := &MockHostAggregateClient{ctrl: ctrl}
	mock.recorder = &MockHostAggregateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostAggregateClient) EXPECT() *MockHostAggregateClientMockRecorder {
	return m.recorder
}

// CreateHostAggregate mocks base method.
func (m *MockHostAggregateClient) CreateHostAggregate(ctx context.Context, opts aggregates.CreateOptsBuilder) (*aggregates.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostAggregate", ctx, opts)
	ret0, _ := ret[0].(*aggregates.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostAggregate indicates an expected call of CreateHostAggregate.
func (mr *MockHostAggregateClientMockRecorder) CreateHostAggregate(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostAggregate", reflect.TypeOf((*MockHostAggregateClient)(nil).CreateHostAggregate), ctx, opts)
}

// DeleteHostAggregate mocks base method.
func (m *MockHostAggregateClient) DeleteHostAggregate(ctx context.Context, resourceID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostAggregate", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHostAggregate indicates an expected call of DeleteHostAggregate.
func (mr *MockHostAggregateClientMockRecorder) DeleteHostAggregate(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostAggregate", reflect.TypeOf((*MockHostAggregateClient)(nil).DeleteHostAggregate), ctx, resourceID)
}

// GetHostAggregate mocks base method.
func (m *MockHostAggregateClient) GetHostAggregate(ctx context.Context, resourceID int) (*aggregates.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAggregate", ctx, resourceID)
	ret0, _ := ret[0].(*aggregates.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostAggregate indicates an expected call of GetHostAggregate.
func (mr *MockHostAggregateClientMockRecorder) GetHostAggregate(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAggregate", reflect.TypeOf((*MockHostAggregateClient)(nil).GetHostAggregate), ctx, resourceID)
}

// ListHostAggregates mocks base method.
func (m *MockHostAggregateClient) ListHostAggregates(ctx context.Context) iter.Seq2[*aggregates.Aggregate, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostAggregates", ctx)
	ret0, _ := ret[0].(iter.Seq2[*aggregates.Aggregate, error])
	return ret0
}

// ListHostAggregates indicates an expected call of ListHostAggregates.
func (mr *MockHostAggregateClientMockRecorder) ListHostAggregates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostAggregates", reflect.TypeOf((*MockHostAggregateClient)(nil).ListHostAggregates), ctx)
}

// UpdateHostAggregate mocks base method.
func (m *MockHostAggregateClient) UpdateHostAggregate(ctx context.Context, id int, opts aggregates.UpdateOptsBuilder) (*aggregates.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostAggregate", ctx, id, opts)
	ret0, _ := ret[0].(*aggregates.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostAggregate indicates an expected call of UpdateHostAggregate.
func (mr *MockHostAggregateClientMockRecorder) UpdateHostAggregate(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostAggregate", reflect.TypeOf((*MockHostAggregateClient)(nil).UpdateHostAggregate), ctx, id, opts)
}
