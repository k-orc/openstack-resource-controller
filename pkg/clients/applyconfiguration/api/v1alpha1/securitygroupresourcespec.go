/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/k-orc/openstack-resource-controller/v2/api/v1alpha1"
)

// SecurityGroupResourceSpecApplyConfiguration represents a declarative configuration of the SecurityGroupResourceSpec type for use
// with apply.
type SecurityGroupResourceSpecApplyConfiguration struct {
	Name        *apiv1alpha1.OpenStackName            `json:"name,omitempty"`
	Description *apiv1alpha1.NeutronDescription       `json:"description,omitempty"`
	Tags        []apiv1alpha1.NeutronTag              `json:"tags,omitempty"`
	Stateful    *bool                                 `json:"stateful,omitempty"`
	Rules       []SecurityGroupRuleApplyConfiguration `json:"rules,omitempty"`
	ProjectRef  *apiv1alpha1.KubernetesNameRef        `json:"projectRef,omitempty"`
}

// SecurityGroupResourceSpecApplyConfiguration constructs a declarative configuration of the SecurityGroupResourceSpec type for use with
// apply.
func SecurityGroupResourceSpec() *SecurityGroupResourceSpecApplyConfiguration {
	return &SecurityGroupResourceSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SecurityGroupResourceSpecApplyConfiguration) WithName(value apiv1alpha1.OpenStackName) *SecurityGroupResourceSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *SecurityGroupResourceSpecApplyConfiguration) WithDescription(value apiv1alpha1.NeutronDescription) *SecurityGroupResourceSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *SecurityGroupResourceSpecApplyConfiguration) WithTags(values ...apiv1alpha1.NeutronTag) *SecurityGroupResourceSpecApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithStateful sets the Stateful field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Stateful field is set to the value of the last call.
func (b *SecurityGroupResourceSpecApplyConfiguration) WithStateful(value bool) *SecurityGroupResourceSpecApplyConfiguration {
	b.Stateful = &value
	return b
}

// WithRules adds the given value to the Rules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Rules field.
func (b *SecurityGroupResourceSpecApplyConfiguration) WithRules(values ...*SecurityGroupRuleApplyConfiguration) *SecurityGroupResourceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRules")
		}
		b.Rules = append(b.Rules, *values[i])
	}
	return b
}

// WithProjectRef sets the ProjectRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProjectRef field is set to the value of the last call.
func (b *SecurityGroupResourceSpecApplyConfiguration) WithProjectRef(value apiv1alpha1.KubernetesNameRef) *SecurityGroupResourceSpecApplyConfiguration {
	b.ProjectRef = &value
	return b
}
