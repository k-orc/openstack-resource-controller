/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/k-orc/openstack-resource-controller/v2/api/v1alpha1"
)

// FlavorFilterApplyConfiguration represents a declarative configuration of the FlavorFilter type for use
// with apply.
type FlavorFilterApplyConfiguration struct {
	Name  *apiv1alpha1.OpenStackName `json:"name,omitempty"`
	RAM   *int32                     `json:"ram,omitempty"`
	Vcpus *int32                     `json:"vcpus,omitempty"`
	Disk  *int32                     `json:"disk,omitempty"`
}

// FlavorFilterApplyConfiguration constructs a declarative configuration of the FlavorFilter type for use with
// apply.
func FlavorFilter() *FlavorFilterApplyConfiguration {
	return &FlavorFilterApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FlavorFilterApplyConfiguration) WithName(value apiv1alpha1.OpenStackName) *FlavorFilterApplyConfiguration {
	b.Name = &value
	return b
}

// WithRAM sets the RAM field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RAM field is set to the value of the last call.
func (b *FlavorFilterApplyConfiguration) WithRAM(value int32) *FlavorFilterApplyConfiguration {
	b.RAM = &value
	return b
}

// WithVcpus sets the Vcpus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vcpus field is set to the value of the last call.
func (b *FlavorFilterApplyConfiguration) WithVcpus(value int32) *FlavorFilterApplyConfiguration {
	b.Vcpus = &value
	return b
}

// WithDisk sets the Disk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disk field is set to the value of the last call.
func (b *FlavorFilterApplyConfiguration) WithDisk(value int32) *FlavorFilterApplyConfiguration {
	b.Disk = &value
	return b
}
