/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RouterResourceStatusApplyConfiguration represents a declarative configuration of the RouterResourceStatus type for use
// with apply.
type RouterResourceStatusApplyConfiguration struct {
	Name                  *string                                   `json:"name,omitempty"`
	Description           *string                                   `json:"description,omitempty"`
	ProjectID             *string                                   `json:"projectID,omitempty"`
	Status                *string                                   `json:"status,omitempty"`
	Tags                  []string                                  `json:"tags,omitempty"`
	AdminStateUp          *bool                                     `json:"adminStateUp,omitempty"`
	ExternalGateways      []ExternalGatewayStatusApplyConfiguration `json:"externalGateways,omitempty"`
	AvailabilityZoneHints []string                                  `json:"availabilityZoneHints,omitempty"`
}

// RouterResourceStatusApplyConfiguration constructs a declarative configuration of the RouterResourceStatus type for use with
// apply.
func RouterResourceStatus() *RouterResourceStatusApplyConfiguration {
	return &RouterResourceStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RouterResourceStatusApplyConfiguration) WithName(value string) *RouterResourceStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *RouterResourceStatusApplyConfiguration) WithDescription(value string) *RouterResourceStatusApplyConfiguration {
	b.Description = &value
	return b
}

// WithProjectID sets the ProjectID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProjectID field is set to the value of the last call.
func (b *RouterResourceStatusApplyConfiguration) WithProjectID(value string) *RouterResourceStatusApplyConfiguration {
	b.ProjectID = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *RouterResourceStatusApplyConfiguration) WithStatus(value string) *RouterResourceStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *RouterResourceStatusApplyConfiguration) WithTags(values ...string) *RouterResourceStatusApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithAdminStateUp sets the AdminStateUp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdminStateUp field is set to the value of the last call.
func (b *RouterResourceStatusApplyConfiguration) WithAdminStateUp(value bool) *RouterResourceStatusApplyConfiguration {
	b.AdminStateUp = &value
	return b
}

// WithExternalGateways adds the given value to the ExternalGateways field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalGateways field.
func (b *RouterResourceStatusApplyConfiguration) WithExternalGateways(values ...*ExternalGatewayStatusApplyConfiguration) *RouterResourceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalGateways")
		}
		b.ExternalGateways = append(b.ExternalGateways, *values[i])
	}
	return b
}

// WithAvailabilityZoneHints adds the given value to the AvailabilityZoneHints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailabilityZoneHints field.
func (b *RouterResourceStatusApplyConfiguration) WithAvailabilityZoneHints(values ...string) *RouterResourceStatusApplyConfiguration {
	for i := range values {
		b.AvailabilityZoneHints = append(b.AvailabilityZoneHints, values[i])
	}
	return b
}
