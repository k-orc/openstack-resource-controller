/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// SecurityGroupRuleStatusApplyConfiguration represents a declarative configuration of the SecurityGroupRuleStatus type for use
// with apply.
type SecurityGroupRuleStatusApplyConfiguration struct {
	ID             *string                            `json:"id,omitempty"`
	Description    *string                            `json:"description,omitempty"`
	Direction      *string                            `json:"direction,omitempty"`
	RemoteGroupID  *string                            `json:"remoteGroupID,omitempty"`
	RemoteIPPrefix *string                            `json:"remoteIPPrefix,omitempty"`
	Protocol       *string                            `json:"protocol,omitempty"`
	Ethertype      *string                            `json:"ethertype,omitempty"`
	PortRange      *PortRangeStatusApplyConfiguration `json:"portRange,omitempty"`
}

// SecurityGroupRuleStatusApplyConfiguration constructs a declarative configuration of the SecurityGroupRuleStatus type for use with
// apply.
func SecurityGroupRuleStatus() *SecurityGroupRuleStatusApplyConfiguration {
	return &SecurityGroupRuleStatusApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithID(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.ID = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithDescription(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.Description = &value
	return b
}

// WithDirection sets the Direction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Direction field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithDirection(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.Direction = &value
	return b
}

// WithRemoteGroupID sets the RemoteGroupID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoteGroupID field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithRemoteGroupID(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.RemoteGroupID = &value
	return b
}

// WithRemoteIPPrefix sets the RemoteIPPrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoteIPPrefix field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithRemoteIPPrefix(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.RemoteIPPrefix = &value
	return b
}

// WithProtocol sets the Protocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protocol field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithProtocol(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.Protocol = &value
	return b
}

// WithEthertype sets the Ethertype field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ethertype field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithEthertype(value string) *SecurityGroupRuleStatusApplyConfiguration {
	b.Ethertype = &value
	return b
}

// WithPortRange sets the PortRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortRange field is set to the value of the last call.
func (b *SecurityGroupRuleStatusApplyConfiguration) WithPortRange(value *PortRangeStatusApplyConfiguration) *SecurityGroupRuleStatusApplyConfiguration {
	b.PortRange = value
	return b
}
