/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ServerResourceStatusApplyConfiguration represents a declarative configuration of the ServerResourceStatus type for use
// with apply.
type ServerResourceStatusApplyConfiguration struct {
	Name         *string  `json:"name,omitempty"`
	HostID       *string  `json:"hostID,omitempty"`
	Status       *string  `json:"status,omitempty"`
	ImageID      *string  `json:"imageID,omitempty"`
	ServerGroups []string `json:"serverGroups,omitempty"`
	Tags         []string `json:"tags,omitempty"`
}

// ServerResourceStatusApplyConfiguration constructs a declarative configuration of the ServerResourceStatus type for use with
// apply.
func ServerResourceStatus() *ServerResourceStatusApplyConfiguration {
	return &ServerResourceStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ServerResourceStatusApplyConfiguration) WithName(value string) *ServerResourceStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithHostID sets the HostID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostID field is set to the value of the last call.
func (b *ServerResourceStatusApplyConfiguration) WithHostID(value string) *ServerResourceStatusApplyConfiguration {
	b.HostID = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ServerResourceStatusApplyConfiguration) WithStatus(value string) *ServerResourceStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithImageID sets the ImageID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageID field is set to the value of the last call.
func (b *ServerResourceStatusApplyConfiguration) WithImageID(value string) *ServerResourceStatusApplyConfiguration {
	b.ImageID = &value
	return b
}

// WithServerGroups adds the given value to the ServerGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServerGroups field.
func (b *ServerResourceStatusApplyConfiguration) WithServerGroups(values ...string) *ServerResourceStatusApplyConfiguration {
	for i := range values {
		b.ServerGroups = append(b.ServerGroups, values[i])
	}
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *ServerResourceStatusApplyConfiguration) WithTags(values ...string) *ServerResourceStatusApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}
