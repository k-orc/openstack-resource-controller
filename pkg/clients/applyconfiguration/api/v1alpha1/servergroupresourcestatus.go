/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ServerGroupResourceStatusApplyConfiguration represents a declarative configuration of the ServerGroupResourceStatus type for use
// with apply.
type ServerGroupResourceStatusApplyConfiguration struct {
	Name      *string                                   `json:"name,omitempty"`
	Policy    *string                                   `json:"policy,omitempty"`
	ProjectID *string                                   `json:"projectID,omitempty"`
	UserID    *string                                   `json:"userID,omitempty"`
	Rules     *ServerGroupRulesStatusApplyConfiguration `json:"rules,omitempty"`
}

// ServerGroupResourceStatusApplyConfiguration constructs a declarative configuration of the ServerGroupResourceStatus type for use with
// apply.
func ServerGroupResourceStatus() *ServerGroupResourceStatusApplyConfiguration {
	return &ServerGroupResourceStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ServerGroupResourceStatusApplyConfiguration) WithName(value string) *ServerGroupResourceStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithPolicy sets the Policy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Policy field is set to the value of the last call.
func (b *ServerGroupResourceStatusApplyConfiguration) WithPolicy(value string) *ServerGroupResourceStatusApplyConfiguration {
	b.Policy = &value
	return b
}

// WithProjectID sets the ProjectID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProjectID field is set to the value of the last call.
func (b *ServerGroupResourceStatusApplyConfiguration) WithProjectID(value string) *ServerGroupResourceStatusApplyConfiguration {
	b.ProjectID = &value
	return b
}

// WithUserID sets the UserID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UserID field is set to the value of the last call.
func (b *ServerGroupResourceStatusApplyConfiguration) WithUserID(value string) *ServerGroupResourceStatusApplyConfiguration {
	b.UserID = &value
	return b
}

// WithRules sets the Rules field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Rules field is set to the value of the last call.
func (b *ServerGroupResourceStatusApplyConfiguration) WithRules(value *ServerGroupRulesStatusApplyConfiguration) *ServerGroupResourceStatusApplyConfiguration {
	b.Rules = value
	return b
}
